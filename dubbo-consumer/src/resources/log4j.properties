#日志配置
log4j.rootLogger=info,consoles,D,E

##自定义日志输出样式
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目，通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
#%m 输出代码中指定的讯息，如log(message)中的message

##输出到控制台日志配置
log4j.appender.consoles=org.apache.log4j.ConsoleAppender
##设置输出样式
log4j.appender.consoles.layout=org.apache.log4j.PatternLayout
##日志打印样式
log4j.appender.consoles.layout.ConversionPattern= [%p] [%-d{yyyy-MM-dd HH:mm:ss}] %c.%t(%L) | %m%n

#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
##输出文件路径
log4j.appender.D.File =./logs/server-info_

#当天的的话，文件名暂时就为server-info_,
#第二天系统会自动生成文件名“server-info_2018-08-23.log”类似日志文件记录前一天日志
log4j.appender.D.DatePattern=yyyy-MM-dd'.log'
##日志是否向后追加
log4j.appender.D.Append = true
##输出日志级别
log4j.appender.D.Threshold = INFO
##设置日志输出样式
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = [%p] [%-d{yyyy-MM-dd HH:mm:ss}] %C.%M(%L) | %m%n

### 输出异常日志 ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = ./logs/server-error_
log4j.appender.E.DatePattern=yyyy-MM-dd'.log'
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = [%p] [%-d{yyyy-MM-dd HH:mm:ss}] %C.%M(%L)
